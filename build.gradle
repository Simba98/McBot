plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'

    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}



group = project.maven_group
version = project.minecraft_version + "-" + project.mod_version



println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    //mappings channel: 'official', version: "${minecraft_version}"

    mappings channel: 'parchment', version: "${parchment_mappings}-${minecraft_version}"

    if (file("./src/main/resources/META-INF/accesstransformer.cfg").exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

if (file("./src/main/resources/${mod_id}.mixins.json").exists()) {
    mixin {
        add sourceSets.main, "${mod_id}.refmap.json"
        config "${mod_id}.mixins.json"
    }
}



sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url 'https://maven.nova-committee.cn/releases'
    }
    mavenCentral()
}


dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'

    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    annotationProcessor "org.projectlombok:lombok:1.18.24"

}


jar {
    from "LICENSE"
    manifest {
        attributes([
                "Specification-Title"     : "atomess",
                "Specification-Vendor"    : "cnlimiter",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "cnlimiter",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
java {
    archivesBaseName = project.archives_base_name
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}
