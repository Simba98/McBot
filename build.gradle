buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'

    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = project.mod_version
group = project.maven_group

java {
    archivesBaseName = 'Bot-Connect-forge'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

minecraft {

    mappings channel: 'parchment', version: '2022.05.02-1.18.2'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'botapi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                botapi {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    maven {
        url 'https://maven.nova-committee.cn/releases'
    }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.25'
    implementation "cn.evolvefield.bot:OneBot-SDK:${project.sdk_version}"
    jarJar "cn.evolvefield.bot:OneBot-SDK:[0.1.4,1.0.0)"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    annotationProcessor "cn.evolvefield.bot:OneBot-SDK:${project.sdk_version}"
}


jar.finalizedBy('reobfJar')


// Example for how to get properties into the manifest for reading at runtime.
jar {
    finalizedBy('reobfJar')
    manifest {
        attributes([
                "Specification-Title"     : "botapi",
                "Specification-Vendor"    : "cnlimiter",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "cnlimiter",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jarJar {
    enable()
    dependencies {
        include(dependency(group: 'cn.evolvefield.bot', name: 'OneBot-SDK', version: '0.1.4'))
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            jarJar.component(it)
            version = "${project.mod_version}"
            artifactId = "${project.archives_base_name}"
            groupId = "${project.maven_group}"
            pom {
                name = 'Bot Connect'
                description = 'Adds chat linking between QQ and Minecraft and QQ commands to request server data.'
                url = 'https://www.evolvefield.cn/article/14'
                licenses {
                    license {
                        name = 'AGPLV3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'cnlimiter'
                        name = 'cnlimiter'
                        email = 'cnlimiter@163.com'
                    }
                }
            }

        }
    }
    repositories {
        if (System.getenv('MAVEN_USERNAME') != null && System.getenv('MAVEN_PASSWORD') != null) {
            maven {
                name 'release'
                url = 'https://maven.nova-committee.cn/releases'

                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}
