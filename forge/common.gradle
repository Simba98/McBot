apply(plugin: "dev.architectury.loom")
apply(plugin: "maven-publish")
apply(plugin: "com.replaymod.preprocess")

int mcVersion = 1

preprocess {
    mcVersion = vars.get().get("MC")
    tabIndentation.set(false)
}


repositories {
    mavenCentral()
    maven { url 'https://maven.nova-committee.cn/releases'}
    maven { url 'https://maven.mohistmc.com/' }

}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation forgeRuntimeLibrary(include("cn.evole.bot:OneBot-Client:${project.onebot_client_version}"))
    implementation forgeRuntimeLibrary(include("cn.evole.config:AtomConfig-Toml:${project.toml_version}"))

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor "org.projectlombok:lombok:1.18.24"

}

loom {
    silentMojangMappingsLicense()
}

remapJar {
    remapperIsolation = true
}


tasks.register('copyJars', Copy) {
    from "$projectDir/build/libs"
    into "$rootDir/build/libs"
}

buildNeeded.finalizedBy("copyJars")

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name + "-" + project.minecraft_dependency

processResources {
    outputs.upToDateWhen { false }

    filesMatching("META-INF/mods.toml") {
        expand([
                "minecraft_version_range"   : project.minecraft_version_range,
                "mod_id"              : project.mod_id,
                "mod_name"            : project.archives_base_name,
                "mod_version"         : project.version
        ])

    }
}

tasks.withType(JavaCompile).configureEach {
    options.setEncoding("UTF-8")
}

jar {
    from("../../../LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}


publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from(components.java)
            version("${project.version}")
            artifactId("${project.archives_base_name}-${project.minecraft_dependency}")
            groupId("${project.maven_group}")
        }
    }

    repositories {
        mavenLocal()
        if (System.getenv('MAVEN_USERNAME') != null && System.getenv('MAVEN_PASSWORD') != null) {
            maven {
                name 'release'
                url = 'https://maven.nova-committee.cn/releases'

                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}